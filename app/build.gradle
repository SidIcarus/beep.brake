apply plugin: 'com.android.application'
import org.apache.tools.ant.taskdefs.condition.Os

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId 'edu.rit.se.beepbrake'
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "0.1"

        ndk { moduleName "beepbrake" }

        // Gradle Plugin 1.5
        // disable limited support for vector drawables fro Android Studio 1.4
        generatedDensities = []

        // Gradle Plugin 2.0
        // disable limited support for vector drawables fro Android Studio 1.4
        // vectorDrawables.useSupportLibrary = true
    }

    // Gradle Plugin 1.5
    // disable limited support for vector drawables fro Android Studio 1.4
    aaptOptions { additionalParameters "--no-version-vectors" }

    lintOptions { abortOnError false }

    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs'
        // This is not necessary unless you have precompiled libraries in your project.
    }
    def ndkDir = android.ndkDirectory
    // def isMac = Os.isFamily(Os.FAMILY_MAC)
    // def isUnix = Os.isFamily(Os.FAMILY_UNIX) // will also return true if it OSX
    def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    //    def ndkBuild = "/ndk-build"
    //    ndkBuild.concat(".cmd")
    //    if (isWindows) { ndkBuild.concat(".cmd") }

    //    def ndkCmd = ndkDir.toString().concat(ndkBuild)

    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
        if (isWindows) {
            commandLine "$ndkDir/ndk-build.cmd",
                    'NDK_PROJECT_PATH=build/intermediates/ndk',
                    'NDK_LIBS_OUT=src/main/jniLibs',
                    'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
                    'NDK_APPLICATION_MK=src/main/jni/Application.mk'
        } else {
            commandLine "$ndkDir/ndk-build",
                    'NDK_PROJECT_PATH=build/intermediates/ndk',
                    'NDK_LIBS_OUT=src/main/jniLibs',
                    'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
                    'NDK_APPLICATION_MK=src/main/jni/Application.mk'
        }
    }
    task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
        destinationDir new File(buildDir, 'libs')
        baseName 'ndk-libs'
        extension 'jar'
        from(new File(buildDir, 'libs')) { include '**/*.so' }
        into 'lib/'
    }
    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        if (isWindows) {
            commandLine "$ndkDir/ndk-build.cmd",
                    '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                    'clean'
        } else {
            commandLine "$ndkDir/ndk-build",
                    '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                    'clean'
        }
    }
    clean.dependsOn 'cleanNative'
    tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn ndkLibsToJar  }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {}
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:support-vector-drawable:23.3.0'
    compile 'com.android.support:animated-vector-drawable:23.3.0'
    compile 'com.android.support:support-annotations:23.3.0'
    compile project(':opencv_java3')

    compile 'com.google.android.gms:play-services-appindexing:8.1.0'
}
